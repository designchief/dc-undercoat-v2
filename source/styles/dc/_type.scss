// Import variables
@use "../base" as *;

@function calculateDynamicPart($min-size, $max-size, $breakpoint-min, $breakpoint-max) {
    // Calculate the slope (change in size over change in viewport width)
    $slope: calc(($max-size - $min-size) / ($breakpoint-max - $breakpoint-min));
    // Convert the slope to vw units (1vw = 1% of viewport width)
    $slope-vw: $slope * 100;
    // Calculate the base size (y-intercept) at the minimum breakpoint
    $base-size: $min-size - calc($slope-vw * $breakpoint-min / 100);
    @return ($base-size, $slope-vw);
}

// Typography sizes and breakpoints
$typography-sizes: (
    "display-2": (max: 8rem, min: 4rem),
    "display-1": (max: 6.5rem, min: 3.475rem),
    "h1": (max: 5rem, min: 2.75rem),
    "h2": (max: 4rem, min: 2.3rem),
    "h3": (max: 3rem, min: 1.8rem),
    "h4": (max: 2rem, min: 1.35rem),
    "h5": (max: 1.5rem, min: 1.175rem),
    "h6": (max: 1.25rem, min: 1rem),
    "main-text": (max: 1.25rem, min: 1rem),
    "small-text": (max: 1rem, min: 0.875rem),
    "xsmall-text": (max: 0.875rem, min: 0.75rem),
    "large-text": (max: 1.5rem, min: 1.25rem),
    "xlarge-text": (max: 1.75rem, min: 1.5rem), 
);

$breakpoint-min: 20rem; // Equivalent to 320px
$breakpoint-max: 90rem; // Equivalent to 1440px

:root {
@each $name, $size in $typography-sizes {
        $min-size: map-get($size, min);
        $max-size: map-get($size, max);
        $dynamic-part: calculateDynamicPart($min-size, $max-size, $breakpoint-min, $breakpoint-max);

        // Generate the clamp function with simplified dynamic part
        --font-size--#{$name}: clamp(#{$min-size}, #{nth($dynamic-part, 1)} + #{nth($dynamic-part, 2)}vw, #{$max-size}); 
    }
}
 
body {
    font-weight: var(--font-weight--text-main);
    font-smoothing: antialiased;
    -webkit-font-smoothing: antialiased;
}

label {
	font-size: inherit;
	line-height: inherit;
	font-weight: inherit;
	margin-top: 0;
	margin-bottom: 0;
}

h1,h2,h3,h4,h5,h6,blockquote {
    text-wrap: balance;
    margin-top: 0rem;
    margin-bottom: 0rem;
}
p {
    text-wrap: pretty;
}
h1 {
    @include u-text-h1;
}
h2 {
    @include u-text-h2;
}
h3 {
    @include u-text-h3;
}
h4 {
    @include u-text-h4;
}
h5 {
    @include u-text-h5;
}
h6 {
    @include u-text-h6;
}

// a:not([class]) {
//     text-decoration: underline;
// }

/* Reset Unordered list when class applied */
ul:where([class]) {
    list-style: none;
    margin-bottom: 0;
    padding-left: 0;

    li {
        margin-bottom: 0;
    }
}

/* Text Links */
h1, h2, h3, h4, h5, h6, p, blockquote, cite, figcaption, .u-rich-text li, [class*="notification"], .form_main_label {
    a {
        @include text-link;
    }
}

// h1, h2, h3, h4, h5, h6 {
//     a {
//         line-height: inherit;
//     }
// }

/* Transitions for theme & link */
body,
a,
section,
.u-button-style,
.button_text_wrap,
[class*="link"],
.u-nav-item,
[class*="card"],
.iub-btn,
#iubFooterBtnContainer button,
.is-ldm-toggle .navbar_menu_icon path,
.navbar_toggle_wrap .navbar_toggle_icon_line {
    transition-property: background-color, border-color, box-shadow, border-radius, opacity;
    transition-duration: 300ms;
}

/* default rich text font styles */
.w-richtext{

    a {
        position: relative;
        z-index: 4;
    }

}

.u-rich-text {

    // > *:first-child {
    //     margin-top: 0;
    // }

    // > *:last-child {
    //     margin-bottom: 0;   
    // }

    h1, h2, h3, h4, h5, h6 { 
        margin-top:  var(--size--2rem);
        margin-bottom: var(--size--1-25rem);
        
    }

    p, ol, ul { 
        margin-top: 0rem;
        margin-bottom: var(--size--1rem);
    }

    figure,
    blockquote {
        margin-top: var(--size--3rem);
        margin-bottom: var(--size--3rem);        
    }

    h1 {
        @include u-text-h2;
    }
    h2 {
        @include u-text-h3;
    }
    h3 {
        @include u-text-h4;
    }
    h4 {
        @include u-text-h5;
    }
    h5 {
        @include u-text-h6;
    }

}
